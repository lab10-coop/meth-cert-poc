
// !!! this is autogenerated by a setup script. Changes will be overwritten !!! 
var contracts = {
   address : "0x01cea0ad9aa1847d6df0a14a0f4b988319517d9a",
    MethCert: {
  "code": "60a0604052600c6060527f4d657468616e65546f6b656e00000000000000000000000000000000000000006080526003805460008290527f4d657468616e65546f6b656e000000000000000000000000000000000000001882556100b5907fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b602060026001841615610100026000190190931692909204601f01919091048101905b8082111561014b57600081556001016100a1565b505060408051808201909152600381527f4d455400000000000000000000000000000000000000000000000000000000006020918201908152600480546000829052915160ff191660061781559161014f91601f6002600019610100600185161502019092169190910401047f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b908101906100a1565b5090565b50506005805460ff191690556000600655600080546c0100000000000000000000000033810204600160a060020a03199091161790556107ca806101936000396000f3606060405236156100c45760e060020a600035046306fdde0381146101315780630b1ab037146101965780630f75e81f146101bc57806318160ddd146101e2578063313ce567146101f057806359c87d701461020157806370a082311461029857806373a82b5f146102b5578063797af627146102db5780638b4a0f70146102eb5780638da5cb5b146102fe57806395d89b4114610315578063a9059cbb1461037a578063dd62ed3e146103ae578063f7cbb1b2146103d8578063fb379c97146103f8575b346100025761048e604080516020808252600e908201527f65746865725f72656a65637465640000000000000000000000000000000000008183015290517f4552489a90ff927907e5ee9e6cdc7361a95692f3d181d83d3ae08dea3e5262e09181900360600190a1610002565b346100025761049060038054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815292919083018282801561060a5780601f106105df5761010080835404028352916020019161060a565b34610002576104fe600435600160205260009081526040902054600160a060020a031681565b346100025761048e60043560005433600160a060020a0390811691161461061257610002565b346100025761051a60065481565b346100025761052c60055460ff1681565b3461000257600435600081815260016020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff19166c010000000000000000000000003380820291909104919091179091558251600160a060020a039091168152908101839052815161048e93927fd4fdae103725a8a8a073bd1b5ca7167a458ccaff0ca631ca3f8c4114543dd147928290030190a150565b346100025761051a60043560076020526000908152604090205481565b346100025761048e60043560005433600160a060020a0390811691161461065957610002565b346100025761048e60043561040b565b346100025761048e600435602435610548565b34610002576104fe600054600160a060020a031681565b346100025761049060048054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815292919083018282801561060a5780601f106105df5761010080835404028352916020019161060a565b346100025761048e600435602435600160a060020a033316600090815260076020526040902054819010156107a357610002565b346100025760086020908152600435600090815260408082209092526024358152205461051a9081565b34610002576105cb60043560026020526000908152604090205460ff1681565b346100025761048e600435602435610542825b600081815260016020526040902054600160a060020a0316151561067f576040805160208082526017908201527f636f6e6669726d5f776974686f75745f726571756573740000000000000000008183015290517f4552489a90ff927907e5ee9e6cdc7361a95692f3d181d83d3ae08dea3e5262e09181900360600190a1610002565b005b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156104f05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60408051600160a060020a039092168252519081900360200190f35b60408051918252519081900360200190f35b6040805160ff9092168252519081900360200190f35b61079f82825b600082815260016020526040812054600160a060020a031615156106c6576040805160208082526010908201527f756e6b6e6f776e5f6461746168617368000000000000000000000000000000008183015290517f4552489a90ff927907e5ee9e6cdc7361a95692f3d181d83d3ae08dea3e5262e09181900360600190a1610002565b604080519115158252519081900360200190f35b820191906000526020600020905b8154815290600101906020018083116105ed57829003601f168201915b505050505081565b60408051600160a060020a03331681526020810183905281517f29900d61a397662a23254264e4692d78bace4c7d5e6fe713d4c473ff0e9e9c3f929181900390910190a150565b600160a060020a0381166000908152600260205260409020805460ff1916600117905550565b60408051600160a060020a03331681526020810183905281517fa0db17f60fbc4261fba456a72648b2db7f4ac0c5b5fd57becee4a1e57326b10a929181900390910190a150565b50600082815260016020908152604080832054600160a060020a031680845260078352928190208054850190556006805485019055805183815291820184905280517fa04c06814626bfc3b20ee449c2983841353cca12dbb890d05642c094be53080a9281900390910190a1505050565b600160a060020a03338116600081815260076020908152604080832080548790039055938616808352918490208054860190558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35b5050565b600160a060020a03821660009081526007602052604090205481810110156107375761000256",
  "info": {
    "source": "pragma solidity ^0.4.4;\n\n/*\n * This contract combines a basic signing facility with an ERC-20 token.\n * Producers can signal certificate requests by communicating a hash of the request data.\n * Reviewers can confirm such requests again based on the hash.\n * The contract allows only confirmations of hashes previously communicated by producers.\n *\n * Finally, reviewers can also issue MET tokens.\n * This is done by communicating a hash and the amount of tokens (representing kWh) to be issued to the producer.\n * The contract as is does not check or enforce the correct amount.\n * It does ensure that every issuance is associated to a request hash.\n * In case the raw data of the requests is made public (no matter by whom - its authenticity can be checked via the hash -\n * it's trivial to audit correct issuance of MET tokens.\n *\n * The token as is has only basic features. It e.g. doesn't support allowances / 3rd party withdrawal.\n */\ncontract MethCert {\n\n    /*\n     * By default, the contract creator has no special privileges.\n     * In order to enable functions callable only by the contract creator,\n     * we remember its address in the \"owner\" field.\n     */\n    address public owner;\n\n    // contract constructor\n    function MethCert() {\n        // Documentation of the msg object: http://solidity.readthedocs.io/en/develop/units-and-global-variables.html#special-variables-and-functions\n        owner = msg.sender;\n    }\n\n    // event for signalling errors (without, the tx creator gets only a generic error about JUMP failing)\n    event errLog(string msg);\n\n    /*\n     * map storing the requested hashes\n     * This is needed only in order to have that information available from within the contract.\n     * For auditing and transparency, it's enough (and cheaper) to just log via event.\n     *\n     * In this implementation, the mapping is used to issue tokens to the address from which the signing request originated.\n     * It does not keep track about the state of a request (signed or not, tokens issued or not).\n     *\n     * the bytes32 key is for the hash, the address value for the requesting address\n     */\n    mapping (bytes32 => address) public certRequests;\n    event certRequestedEvent(address by, bytes32 datahash);\n\n    /*\n     * To be used by producers requesting a certificate.\n     * This implementation has no restrictions about who can be a producer (permissionless access).\n     */\n    function request(bytes32 datahash) {\n        certRequests[datahash] = msg.sender;\n        certRequestedEvent(msg.sender, datahash);\n    }\n\n    event certConfirmedEvent(address by, bytes32 datahash);\n\n    /*\n     * With this function, a certificate (identified by its hash) is confirmed by a reviewer.\n     */\n    function confirm(bytes32 datahash) reviewersOnly {\n        if(certRequests[datahash] == 0x0) {\n            errLog(\"confirm_without_request\");\n            throw;\n        }\n        certConfirmedEvent(msg.sender, datahash);\n    }\n\n    /*\n     * convenience function for confirming and issuing tokens in a single transaction\n     */\n    function confirmAndIssueTokens(bytes32 datahash, uint256 amount) {\n        confirm(datahash);\n        issueTokensFor(datahash, amount);\n    }\n\n    /*\n     * Minimal example for a reviewer registration function - accessible only to the contract owner.\n     * for convenient lookup, the reviewers are stored in a mapping (value: true only) instead of an array\n     */\n    mapping (address => bool) public reviewers;\n    function addReviewer(address addr) ownerOnly {\n        reviewers[addr] = true;\n    }\n\n    /*\n     * Function modifiers are a convenient way to augment functions,\n     * e.g. by adding preconditions and/or postconditions (in Solidity that's often used for access restrictions).\n     * See http://solidity.readthedocs.io/en/develop/contracts.html#modifiers\n     */\n    modifier ownerOnly {\n        if(msg.sender != owner) throw;\n        _;\n    }\n\n    modifier reviewersOnly {\n        /*\n         * This code - if uncommented - would restrict access to functions with this modifier to registered reviewers.\n         */\n        /*\n        if(! reviewers[msg.sender]) {\n            errLog(\"unknown_reviewer\");\n            throw;\n        }\n        */\n        _;\n    }\n\n    event certIssuedEvent(address by, bytes32 datahash);\n    function issue(bytes32 datahash) ownerOnly {\n        certIssuedEvent(msg.sender, datahash);\n    }\n\n    // ====== TOKEN FUNCTIONALITY=======\n\n    string public name = \"MethaneToken\";\n    string public symbol = \"MET\";\n    uint8 public decimals = 0;\n    uint256 public totalSupply = 0;\n\n    mapping (address => uint256) public balanceOf;\n\n    // unused - just for ERC20 compatibility (not sure if needed)\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event tokensIssuedEvent(address receiver, uint256 amount);\n    function issueTokensFor(bytes32 datahash, uint amount) reviewersOnly {\n        if(certRequests[datahash] == 0x0) {\n            errLog(\"unknown_datahash\");\n            throw;\n        }\n        var receiver = certRequests[datahash];\n        balanceOf[receiver] += amount;\n        totalSupply += amount;\n        tokensIssuedEvent(receiver, amount);\n    }\n\n    function transfer(address _to, uint256 _value) {\n        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n        balanceOf[_to] += _value;                            // Add the same to the recipient\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n    }\n\n    /* This unnamed function is called whenever someone tries to send ether to the contract */\n    function () {\n        errLog(\"ether_rejected\");\n        throw;     // Prevents accidental sending of ether\n    }\n\n    /*\n     * Since the energy it reflects is a consumable,\n     * this token would probably also need a burn/consume function which decreases totalSupply\n     */\n}",
    "language": "Solidity",
    "languageVersion": "0",
    "compilerVersion": "0.4.4+commit.4633f3de.Emscripten.clang",
    "abiDefinition": [
      {
        "constant": true,
        "inputs": [],
        "name": "name",
        "outputs": [
          {
            "name": "",
            "type": "string"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "name": "certRequests",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "datahash",
            "type": "bytes32"
          }
        ],
        "name": "issue",
        "outputs": [],
        "payable": false,
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "totalSupply",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "decimals",
        "outputs": [
          {
            "name": "",
            "type": "uint8"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "datahash",
            "type": "bytes32"
          }
        ],
        "name": "request",
        "outputs": [],
        "payable": false,
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "addr",
            "type": "address"
          }
        ],
        "name": "addReviewer",
        "outputs": [],
        "payable": false,
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "datahash",
            "type": "bytes32"
          }
        ],
        "name": "confirm",
        "outputs": [],
        "payable": false,
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "datahash",
            "type": "bytes32"
          },
          {
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "issueTokensFor",
        "outputs": [],
        "payable": false,
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "symbol",
        "outputs": [
          {
            "name": "",
            "type": "string"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "transfer",
        "outputs": [],
        "payable": false,
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "",
            "type": "address"
          },
          {
            "name": "",
            "type": "address"
          }
        ],
        "name": "allowance",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "name": "reviewers",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "datahash",
            "type": "bytes32"
          },
          {
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "confirmAndIssueTokens",
        "outputs": [],
        "payable": false,
        "type": "function"
      },
      {
        "inputs": [],
        "type": "constructor"
      },
      {
        "payable": false,
        "type": "fallback"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "name": "msg",
            "type": "string"
          }
        ],
        "name": "errLog",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "name": "by",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "datahash",
            "type": "bytes32"
          }
        ],
        "name": "certRequestedEvent",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "name": "by",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "datahash",
            "type": "bytes32"
          }
        ],
        "name": "certConfirmedEvent",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "name": "by",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "datahash",
            "type": "bytes32"
          }
        ],
        "name": "certIssuedEvent",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Transfer",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "name": "receiver",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "tokensIssuedEvent",
        "type": "event"
      }
    ],
    "userDoc": {
      "methods": {}
    },
    "developerDoc": {
      "methods": {}
    }
  }
}
}